{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","weatherMetod","mdbreact_esm","type","name","hint","color","Weather","city","country","description","temp","humidity","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","sys","weather","err","stop","info","components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9e9f6ec.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nclass Info extends React.Component {\r\n  render() {\r\n    return(\r\n      <div  className = \"header\" >\r\n        <h2>Поиск данных о погоде</h2>\r\n        <p>Узнайте погоду в вашем городе!</p>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\nimport {MDBRow, MDBBtn,  MDBInput } from \"mdbreact\";\r\nclass Form extends React.Component {\r\n  render() {\r\n    return(\r\n    <form onSubmit={this.props.weatherMetod}>\r\n        <div className=\"col-md-6 col-lg-4 col-xs-8\">\r\n      <MDBInput type=\"text\" name=\"city\" hint=\"Город\" />\r\n</div>\r\n      <div className=\"btn1\">\r\n      <MDBBtn type=\"submit\" color=\"danger\">Узнать погоду</MDBBtn>\r\n      </div>\r\n\r\n    </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weather__info\">\r\n  <div className=\"col-md-7 card\">\r\n   <div className=\"card-info col-md-7\">\r\n\t {\r\n\t \tprops.city && props.country && <p className=\"weather__key\"> Местоположение:\r\n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n\t \t</p>\r\n\t }\r\n   {\r\n    props.description && <p className=\"weather__key\"> Погода:\r\n      <span className=\"weather__value\"> { props.description } </span>\r\n   </p>\r\n   }\r\n\t {\r\n\t \tprops.temp && <p className=\"weather__key\"> Температура:\r\n\t \t\t<span className=\"weather__value\"> { props.temp } С\t</span>\r\n\t \t</p>\r\n\t }\r\n\r\n\t {\r\n\t \tprops.humidity && <p className=\"weather__key\"> Влажность:\r\n\t \t\t<span className=\"weather__value\"> { props.humidity } % </span>\r\n\t \t</p>\r\n\t }\r\n\r\n\t {\r\n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>\r\n\t }\r\n      </div>\r\n\r\n    {\r\n     props.city && props.country && <div className = \"col-md-5 desc\">\r\n\t\t <p className=\"weather__key\">\r\n    Сегодня\r\n     <span className=\"weather__value\"> { props.description } </span>\r\n     </p>\r\n\t\t   </div>\r\n   }\r\n\r\n  </div>\r\n\r\n  </div>\r\n\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = \"54d06c0fd92f2737bb4b11425604b194\";\r\n\r\nclass App extends React.Component {\r\nstate = {\r\n  temp: undefined,\r\n  city:undefined,\r\n  country:undefined,\r\n  humidity: undefined,\r\n  description: undefined,\r\n  error:undefined\r\n}\r\ngettingWeather = async (e) => {\r\n  e.preventDefault();\r\n  const city = e.target.elements.city.value;\r\n\r\n  if(city){\r\n    const api_url = await\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`);\r\n    const data = await api_url.json();\r\n\r\n\r\ntry{\r\n    this.setState({\r\n      temp: data.main.temp,\r\n      city: data.name,\r\n      country: data.sys.country,\r\n      humidity: data.main.humidity,\r\n      description: data.weather[0].description,\r\n      error:\"\"\r\n    });}\r\n    catch (err) {\r\n\r\n      this.setState({\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"Введите название города.\"\r\n      });\r\n\r\n}\r\n  } else {\r\n      this.setState({\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"Введите название города.\"\r\n      });\r\n    }\r\n\r\n}\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Info />\r\n        <Form weatherMetod={this.gettingWeather}/>\r\n        <Weather\r\n          temp={this.state.temp}\r\n          humidity={this.state.humidity}\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          description={this.state.description}\r\n          error={this.state.error}\r\n\r\n         />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}